



WG Working Group                                             C. Martinez
Internet-Draft                                           8 November 2023
Intended status: Informational                                          
Expires: 11 May 2024


                    Partial Content Uploads in HTTP
               draft-ietf-partial-content-uploads-latest

Abstract

   The Hypertext Transfer Protocol (HTTP) is a stateless application-
   level protocol for distributed, collaborative, hypertext information
   systems.  This document defines partial content uploads, which allows
   a client to upload content, such as a large file, via multiple
   requests.  This document also outlines the metadata header fields for
   indicating state changes, request header fields for making
   preconditions on such state, and the rules for constructing the
   responses.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-ietf-partial-content-uploads/.

   Source for this draft and an issue tracker can be found at
   https://github.com/commonsensesoftware/partial-content-uploads.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 11 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Terminology
     1.2.  Syntax Notation
   2.  New Partial Content Transfer
     2.1.  The Content-Disposition Header Field
       2.1.1.  The Create Disposition Type
       2.1.2.  Disposition Parameter: 'Size'
       2.1.3.  Disposition Parameter: 'Filename'
       2.1.4.  Disposition Parameter: 'Modification-Date'
     2.2.  Resource Contention
     2.3.  Entity Tags
     2.4.  Resource Retrieval
     2.5.  Example
   3.  Update Partial Content Transfer
     3.1.  Content-Range Header Field
     3.2.  Last-Modified Header Field
     3.3.  If-Match Header Field
     3.4.  Expect Header Field
     3.5.  Resource Contention
     3.6.  Completing the Transfer
     3.7.  Example
   4.  Cancel Partial Content Transfer
     4.1.  If-Match Header Field
     4.2.  Resource Contention
     4.3.  Example
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Appendix A.  Content-Disposition Versus Content-Length
   Author's Address

1.  Introduction

   Hypertext Transfer Protocol (HTTP) clients often encounter
   interrupted data transfers because of canceled requests or dropped
   connections.  RFC 7233 defines HTTP range requests and partial
   responses, but it only describes how a client can transfer data from
   a server (e.g. download).

   This document defines a reciprocal set of HTTP range requests and
   responses that a client can use to transfer data to a server (e.g.
   upload).  Where appropriate, this document will use existing range
   units and header fields defined in [RFC7233], [RFC6266], and
   [RFC2183].

   Although the range request mechanism is designed to allow for
   extensible range types, this specification only defines requests for
   byte ranges.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This specification defines conformance criteria for both senders
   (usually, HTTP user agents) and recipients (usually, HTTP origin
   servers).  An implementation is considered conformant if it complies
   with all the requirements associated with its role.

1.2.  Syntax Notation

   This specification uses the Augmented Backus-Naur Form (ABNF)
   notation of [RFC5234] with a list extension, defined in Section 7 of
   [RFC7230], that allows for compact definition of comma-separated
   lists using a '#' operator (similar to how the '*' operator indicates
   repetition).

2.  New Partial Content Transfer

   The POST method MUST be used to indicate that the client intends to
   start a new partial content transfer.  The client MUST send the
   Content-Disposition header field defined in [RFC6266] to indicate how
   the origin server should process the content.  This will provide
   enough information for the origin server to allocate the required
   storage space before any content is transferred.  This behavior
   ensures that the origin server has enough storage space and the
   client is authorized to upload the content.

   If the origin server successfully allocates the required storage, it
   MUST respond with 201 (Created), including a Location and ETag header
   field.  If an origin server refuses to allocate the requested storage
   (ex: due to policy limit), it MUST respond with 400 (Bad Request).
   It is RECOMMENDED that such a response include problem details as
   defined in [RFC7807] which explains why the content cannot be
   allocated.  When an origin server fails to allocate storage for the
   resource, then it MUST respond with 507 (Insufficient Storage).  If
   the client is not authorized to create the requested resource, the
   origin server MUST respond with 401 (Unauthorized) if authentication
   is possible; otherwise, it MUST respond with 403 (Forbidden).

   There is no temporal specification as to how long a client can take
   to transfer all the content ranges.  A server MAY choose to
   implicitly cancel a transfer it deems abandoned due to inactivity
   after an arbitrary period or after an absolute amount of time has
   passed.  It is RECOMMENDED that an origin server which knows when the
   transfer will be considered canceled return the Sunset header as
   defined in [RFC8594], which indicates the cancellation date and time.
   Section 4 describes how a transfer is explicitly canceled.

2.1.  The Content-Disposition Header Field

   Content-Disposition is a REQUIRED header field.  In its absence, the
   origin server MUST respond with 400 (Bad Request).  This header field
   indicates that the origin server should create a new storage resource
   and of what size.

2.1.1.  The Create Disposition Type

   The disposition type "create" is REQUIRED and is meant to instruct
   the origin server that it should pre-allocate the required storage
   space, but the request itself does not contain a body that is to be
   written to storage.

   If a client were to send one of the existing disposition types
   "inline" or "attachment" to an origin server without a body, it is
   not clear what action the server should take.  The disposition type
   "create" expresses a client's expectation that the disposition of the
   origin server is to create a resource of "size" octets.

2.1.2.  Disposition Parameter: 'Size'

   The size parameter is REQUIRED and has the same meaning as defined in
   Section 2.7 of [RFC2183].  The origin server MUST use this value as
   the amount of storage to allocate in octets.

   If a client does not provide the size parameter or the size is equal
   to or less than zero, the origin server MUST respond with 411 (Length
   Required).  If the origin server refuses to allocate the requested
   storage, it MUST respond with 400 (Bad Request).  It is RECOMMENDED
   that such a response include problem details as defined in [RFC7807]
   which explains why the content cannot be allocated and includes the
   maximum allowable size.  For example, if the requested size is too
   large, the server could respond with:

   HTTP/1.1 400 Bad Request
   Content-Type: application/problem+json
   Content-Language: en

   {
     "type": "<rfc url>#<rfc section>",
     "title": "The requested resource size is too large."
     "detail": "1TB exceeds the 200GB maximum, allowed size.",
     "allowed": {
       "size": 200,
       "unit": "GB"
     }
   }

2.1.3.  Disposition Parameter: 'Filename'

   The "filename" and "filename*" parameters are OPTIONAL parameters
   that have the same meaning defined in Section 4.3 of [RFC6266].  When
   specified by a client, the origin server MAY use the specified file
   name in lieu of the resource identifier derived from the request URL.

2.1.4.  Disposition Parameter: 'Modification-Date'

   The modification-date parameter is OPTIONAL and has the same meaning
   as defined in Section 2.5 of [RFC2183].  When the client does not
   specify the modification-date parameter, the current date and time on
   the origin server MAY be used if the server has a clock.

2.2.  Resource Contention

   It is possible that multiple clients MAY request an origin server
   provision storage for the same resource.  An origin server SHOULD use
   optimistic behavior such that the last successful client request is
   the owner of the remaining transfer requests.  The entity tag
   returned by the origin server in the response provides the
   correlation to all other requests for a given client.  If the server
   is unable to fulfill the request because the resource cannot be
   provisioned, it MUST respond with 409 (Conflict) to which a client
   MAY retry the request.  A server MAY also return the Retry-After
   header field as defined in Section 7.1.3 of [RFC7231] to provide a
   hint to the client as to how long it should wait before retrying the
   request.

   It is NOT RECOMMENDED that origin servers employ a stateful locking
   strategy as it could result in a condition by which no client is able
   to create the requested resource.  This document does not describe
   how to lock or unlock such a resource.

2.3.  Entity Tags

   Upon successful allocation of the required storage space, the origin
   server MUST return an entity tag in the response.  The entity tag
   MUST be used for all subsequent requests, including canceling the
   entire transfer.  All entity tags returned by the origin server
   SHOULD use strong validation.

2.4.  Resource Retrieval

   An origin server which supports partial content uploads MAY also
   support requesting that same resource for downloads.  An origin
   server that implements this capability MUST NOT allow GET requests,
   in part or in whole, to the provisioned resource until all the
   corresponding resource content has been transferred to the origin
   server.  The origin server MUST respond with 404 (Not Found) for any
   resource that has not been completely transferred.

2.5.  Example

   Here is an example of a POST request to initiate a new partial
   content transfer:

   Content-Disposition: create; size=4294967296

   An example response would be:

   Location: <URL>
   ETag: "sz8L2qGcV0SHqg8rXwALVQ=="
   Sunset: Mon, 13 Nov 2023 00:00:00 GMT

3.  Update Partial Content Transfer

   The PATCH method MUST be used to update partial content.  Unlike
   other uses of PATCH, an origin server MUST complete this operation
   idempotently.  Given the entity tag provided by the client and the
   fact that the required storage space has already been allocated, the
   origin server has enough information to safely fulfill the request
   idempotently.  This behavior is true even if multiple client requests
   occur concurrently or overlap in content range.

   If the origin server successfully updates the specified content
   range, then it MUST respond with 204 (No Content).  If the Content-
   Disposition header field contained the modification-date parameter,
   then the origin server MUST also return this value in the response
   Last-Modified header field.

3.1.  Content-Range Header Field

   Content-Range is a REQUIRED header field that has the same meaning as
   defined in Section 4.2 of [RFC7233].  The Content-Range header field
   informs the origin server what part of the content is being
   transferred.

   If the byte-range in Content-Range is invalid or the complete-length
   does not match the provisioned storage amount defined by the size
   parameter in the Content-Disposition header field when the partial
   content transfer was started, the server MUST respond with 416 (Range
   Not Satisfiable).  A client SHOULD inspect the complete-length of the
   Content-Range header field in the error response to determine whether
   the source content has been modified.

3.2.  Last-Modified Header Field

   Last-Modified is an OPTIONAL header field and has the same meaning as
   defined in Section 2.2 of [RFC7232].  If the modification-date
   parameter was specified in the Content-Disposition header field as
   part of the start of the partial content transfer, then the origin
   server MUST respond with the Last-Modified header field containing
   the same value.

   A client MAY use the Last-Modified header field to determine whether
   its copy of the content being transferred is still the same as the
   copy the origin server has.

3.3.  If-Match Header Field

   If-Match is a REQUIRED header field.  The If-Match header field MUST
   contain the entity tag returned by the origin server when the partial
   content transfer was started.  If a client does not specify the If-
   Match header field, the server MUST respond with 428 (Precondition
   Required).  If the entity tag specified by the client does not match
   the value known to the server, the server MUST respond with 412
   (Precondition Failed).

3.4.  Expect Header Field

   Expect is an OPTIONAL header field and has the same meaning as
   defined in Section 5.1.1 of [RFC7231].  Partial content uploads can
   still be large.  Clients SHOULD send the 100-Continue expectation to
   ensure the server is willing to accept the size of the content being
   sent.  If the client sends more partial content than the server is
   willing to accept in a single request, it MUST respond with 413
   (Payload Too Large).

3.5.  Resource Contention

   It is possible that multiple clients MAY request that an origin
   server update a partial content transfer for the same resource.
   Provided that the If-Match header field contains a valid entity tag
   (Section 3.3), an origin server SHOULD use an optimistic behavior
   when copying the transferred content to storage.  If the server is
   unable to fulfill the request because the resource is inaccessible,
   it MUST respond with 409 (Conflict).  Since the request MUST be
   idempotent, a client MAY retry a 409 error response.  A server MAY
   also return the Retry-After header field as defined in Section 7.1.3
   of [RFC7231] to provide a hint to the client as to how long it should
   wait before retrying the request.

   If the server is unable to fulfill the request because the allocated
   storage for the resource no longer exists, the server MUST respond
   with 410 (Gone).

   Retrying large content transfers can strain network resources and are
   likely to have high latency.  If the origin server is aware that the
   storage resource is temporarily unavailable, it is RECOMMENDED that
   it automatically retry copying the transferred content.  The number
   of times the server retries, or whether that server retries at all,
   is at the discretion of the server.

3.6.  Completing the Transfer

   To complete a transfer, a client MUST send all the corresponding
   content ranges.  A client MAY vary the size of each transfer; for
   example, it may increase or decrease the content range based on
   available network bandwidth.  A server knows that the transfer is
   complete when it has received transfers from a client that contain
   contiguous content ranges up to the size of the total content,
   potentially overlapping.

   A server SHOULD NOT be stateful.  A server, however, MAY choose to
   store the start and end position of each content range received in
   external storage such as a file or database.  The exact mechanism
   used to implement this behavior is at the discretion of the server.
   Once the server has made the decision that all the content has been
   transferred, it MAY allow access to the resource via the GET method.

3.7.  Example

   Here is an example of a PATCH request which transfers part of an
   upload:

   Content-Type: application/octet-stream
   Content-Length: 104857600
   Content-Range: bytes 0-104857600/4294967296
   If-Match: "sz8L2qGcV0SHqg8rXwALVQ=="
   Expect: 100-continue

   …<message body>…

4.  Cancel Partial Content Transfer

   The DELETE method MUST be used to cancel a partial content transfer.
   When a client requests that a partial content transfer be canceled,
   the server MUST deallocate the storage previously provisioned for the
   transfer.

   Only the client originator can cancel the content transfer.  The same
   client or a new client MAY begin a new partial content transfer
   before the existing transfer is complete.  Starting a new partial
   content transfer intrinsically cancels any existing transfer.

4.1.  If-Match Header Field

   If-Match is a REQUIRED header field.  The If-Match header field MUST
   contain the entity tag returned by the origin server when the partial
   content transfer was started.  If a client does not specify the If-
   Match header field, the server MUST respond with 428 (Precondition
   Required).  If the entity tag specified by the client does not match
   the value known to the server, the server MUST respond with 412
   (Precondition Failed).

4.2.  Resource Contention

   It is possible that multiple clients MAY request that an origin
   server cancel a partial content transfer for the same resource.  If
   the server is unable to fulfill the request because the resource is
   inaccessible, it MUST respond with 409 (Conflict).  Since the request
   MUST be idempotent, a client MAY retry a 409 error response.  A
   server MAY also return the Retry-After header field as defined in
   Section 7.1.3 of [RFC7231] to provide a hint to the client as to how
   long it should wait before retrying the request.

   If the server is unable to fulfill the request because the allocated
   storage for the resource no longer exists, the server MUST respond
   with 204 (No Content) because the transfer has already been canceled.

4.3.  Example

   Here is an example of canceling a transfer:

   If-Match: "sz8L2qGcV0SHqg8rXwALVQ=="

5.  Security Considerations

   This document has the same security considerations that are outlined
   in Section 5 of [RFC2183].  There are additional risks from clients
   requesting unintentionally large resources.  Section 2 and Section 3
   describe the validation process and how to reject such a request.
   The maximum sizes allowed, in whole or in part, are at the discretion
   of the origin server.

   While this document mandates that entity tags be used in requests, it
   does not dictate the format or content of those values.  An origin
   server SHOULD generate an entity tag that cannot be easily replayed.
   A few possible techniques might include rotating the entity tag
   during each request as well as encrypting or signing a value in the
   entity tag using a client certificate.  These protective measures
   would be in addition to transport-level security, client
   authentication, and client authorization.

6.  IANA Considerations

   This document registers a new "disposition-type" value for the
   Content-Disposition header: create.  The definition and usage of this
   value is described in Section 2.1.1.  IANA is asked to add a new
   "disposition-type" value to the Content-Disposition header as defined
   by [RFC2183]:

   create: allocate a resource of "size" octets without a body

   The "size" parameter is REQUIRED.  The "filename", "creation-date",
   "modification-date", and "read-date" are OPTIONAL.  Any other
   parameters are unused and SHOULD be ignored.

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2183]  Troost, R., Dorner, S., and K. Moore, Ed., "Communicating
              Presentation Information in Internet Messages: The
              Content-Disposition Header Field", RFC 2183,
              DOI 10.17487/RFC2183, August 1997,
              <https://www.rfc-editor.org/rfc/rfc2183>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/rfc/rfc5234>.

   [RFC6266]  Reschke, J., "Use of the Content-Disposition Header Field
              in the Hypertext Transfer Protocol (HTTP)", RFC 6266,
              DOI 10.17487/RFC6266, June 2011,
              <https://www.rfc-editor.org/rfc/rfc6266>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7231>.

   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Conditional Requests", RFC 7232,
              DOI 10.17487/RFC7232, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7232>.

   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
              "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
              RFC 7233, DOI 10.17487/RFC7233, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7233>.

   [RFC7630]  Merkle, J., Ed. and M. Lochter, "HMAC-SHA-2 Authentication
              Protocols in the User-based Security Model (USM) for
              SNMPv3", RFC 7630, DOI 10.17487/RFC7630, October 2015,
              <https://www.rfc-editor.org/rfc/rfc7630>.

   [RFC7631]  Dearlove, C. and T. Clausen, "TLV Naming in the Mobile Ad
              Hoc Network (MANET) Generalized Packet/Message Format",
              RFC 7631, DOI 10.17487/RFC7631, September 2015,
              <https://www.rfc-editor.org/rfc/rfc7631>.

   [RFC7807]  Nottingham, M. and E. Wilde, "Problem Details for HTTP
              APIs", RFC 7807, DOI 10.17487/RFC7807, March 2016,
              <https://www.rfc-editor.org/rfc/rfc7807>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8594]  Wilde, E., "The Sunset HTTP Header Field", RFC 8594,
              DOI 10.17487/RFC8594, May 2019,
              <https://www.rfc-editor.org/rfc/rfc8594>.

7.2.  Informative References

   [XHR]      van Kesteren, A., "XMLHttpRequest, Living Standard",
              September 2023, <https://xhr.spec.whatwg.org/>.

Appendix A.  Content-Disposition Versus Content-Length

   The Content-Length header field defined in Section 3.3.2 of [RFC7630]
   is the most appropriate header field to indicate the size of the
   intended content being transferred.  As Section 3 of [RFC7631]
   indicates, a 'representation' can be anything.  In this document, the
   'representation' would be the allocated storage for the content
   transfer, such as a file.

   The client scripting engines of modern browsers use the
   XMLHttpRequest (XHR) API.  Section 4.5.2 of the [XHR] specification
   clearly indicates that the Content-Length header is restricted and
   may only be set by the browser.  The inability to set the Content-
   Length header without a body makes it an unusable header field as it
   relates to this document.

   In lieu of defining a new header field, this document elected to use
   the existing Content-Disposition header field defined in [RFC2183]
   and [RFC6266] to serve the same purpose.

Author's Address

   Christopher Martinez
   Email: chris.s.martinez@outlook.com
